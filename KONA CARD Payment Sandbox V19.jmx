<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test0913s3@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">김코코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19890530</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345675</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626151</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045229</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400350707</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2808</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">179</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q174BB11FAF1B7550C9E24251E5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">11112333333</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">NH농협은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20230913133912142268</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">1000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 6" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test0913s3@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">김코코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19890530</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345675</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626151</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045229</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400470059</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2811</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">391</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q174BB11FAF1B7550C9E24251E5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">11112333333</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">NH농협은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20230913133912142268</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 2" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test0919s2@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">한배코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19800704</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345676</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">949133940035064</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2808</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">971</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1F6B9E797F1B754AABB98CB070</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">33330155555556</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">KB국민은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20230914124336142302</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 3" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test0919s2@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">한배코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19800704</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345676</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400370317</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2809</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">821</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1B1AE31CEF1B7708FD83C6C075</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">33330155555556</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">KB국민은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20230914124336142302</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 4" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test0919s2@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">한배코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19800704</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345676</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400350640</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2809</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">821</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1B1AE31CEF1B7708FD83C6C075</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">33330155555556</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">KB국민은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20230914124336142302</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 5" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test1019s1@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">김코나</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19751112</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345677</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045299</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400410527</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2810</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">105</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1E4976B41F1B792AAD42E0C282</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">333015555557</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">IBK기업은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20231019181349142347</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 7" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test1128s1@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">김코코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19890530</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345678</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626151</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045454</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400501028</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2811</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">716</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q138A168EFF1B7C3BE7F5ED63AF</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">11112333333</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">NH농협은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20231128123627142400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 8" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test1128s2@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">한배코</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19800704</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345680</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045455</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400350640</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2808</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">971</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1F6B9E797F1B754AABB98CB070</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">33330155555556</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">KB국민은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20231128144437142401</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 9" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test1129s1@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">정푸루</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19880214</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345681</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626151</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045459</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400350707</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2808</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">162</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q1CEAD3175F1B754E5135573FBD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">33330155555556</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">004</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">KB국민은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20231129120653142402</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentCancelnrNumber" elementType="Argument">
            <stringProp name="Argument.name">PaymentCancelnrNumber</stringProp>
            <stringProp name="Argument.value">KMD240130031866626</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Sandbox 10" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="secret_Key" elementType="Argument">
            <stringProp name="Argument.name">secret_Key</stringProp>
            <stringProp name="Argument.value">c5e073</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
          </elementProp>
          <elementProp name="baseURL" elementType="Argument">
            <stringProp name="Argument.name">baseURL</stringProp>
            <stringProp name="Argument.value">sandbox.konaplate.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="asp_id" elementType="Argument">
            <stringProp name="Argument.name">asp_id</stringProp>
            <stringProp name="Argument.value">000170000000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="access_key" elementType="Argument">
            <stringProp name="Argument.name">access_key</stringProp>
            <stringProp name="Argument.value">6167e69-a03591c091c604a545f8bf71d23faa14</stringProp>
            <stringProp name="Argument.desc">Common for All API. Do not use Mock Key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="time_zone" elementType="Argument">
            <stringProp name="Argument.name">time_zone</stringProp>
            <stringProp name="Argument.value">KST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="crypto_key_id" elementType="Argument">
            <stringProp name="Argument.name">crypto_key_id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">9942fcb004a6c7d2925b8dfbac633b58</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="publickey" elementType="Argument">
            <stringProp name="Argument.name">publickey</stringProp>
            <stringProp name="Argument.value">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtvPwX0biy08R0lFJdG/sPVcfwjkxYoDTEBgSqKQRMkPOXpdTrfVVn8mNDGRzYQ8PoYeC7zCy61OPsVHDYZJG56Burkp11d/fhKOTtBqtpQStWirjQQ93Ry20JSD2D8x4C+dAJNtVwg3Sq1JYqsi9kU3C7fz1GCjowmxzB4l3VcQeaCScsebVQ9uvEsqXD+tUZe3f+ctdqZM+DwT01uHcSK1rJEbMNNH6NZe5es8VmiGzClnfpTe1Zc8kVWbRP/LQ5SHanAQk3YctwSJCgyOkE0BBxhKPWHO21v/ePUnmdfDqZIGaKK418r8XtvsnyPdUOAalrwPh8TyqIS5LW8Y8KQIDAQAB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="privatekey" elementType="Argument">
            <stringProp name="Argument.name">privatekey</stringProp>
            <stringProp name="Argument.value">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC+4G8Xwnrpu5YsIVrJHxkvPxOj9QnNgyI8bqMkr4KQIeKLjg0RhviOjjSrgMU8TwNYSzKrTxp/NSWBsPdLC9TBwv47dvcMJ4D2t/b6EWEEYdO3oobv+hYLSrZrSq5aHz3LlyjLY9oaDoyBwLBupKuMheypNHm8SF0YkJkcSyvfcWqFZoVG+A0nz5Kac/3M42o3w53NzA0UdJ/Dt7I1PNu+uQGTTWckFrfnEiT5CNBjZtDum3rEDt0oUc+70KguHG6JP4DZHQAVyYrx8IJBK9ixC/ye2FR4de4pmQMlr6drIzSoT8vfLvGjKtnVWo38TlHhMKldkSByygWObfYgucVBAgMBAAECggEAFCzGsT02HqRcMBfqb52g3NSO7+KDgbxdjwOmrMb8Rt2+A0Alc3fPp8myGXqH3mL/mIKCPYcj5tQoPbgFu2Hpv/0rP//IBvnZ8LnrGe1iUsNATIWaO500XUctVtPS7+Wjc3RrtGu+bsig40oJm/g9xaGWLSBFybfgVytZc5sibQByJBbR9xube8IZ/igBvtU8pV2Iok80djdsQQ/sHtlupjdSfg1Palm/UI+Jw7LJAstSEpTuo4xNJQ2VQdIex291rsi8Q3L1LZ7W1Y25aGuWXDEDxonWF9Sj9fQbESbxwVHrw/fO0OVliPG2wXXOeSc8SaiznCn5qP3n+4U/hElL0QKBgQDhJCs7ZLyzA9ssk9Q/fBJ2V1syeXjyzP1SuOSnZLgCCqQsxMdDcCbHJ9dVVndxvwLnhUY7IZTPzWQLoHJehCV83941AtX571B/BwJusUMVk8SdjZIZ/HENi9Kuep5h6aQutsaVxHHqYMpWUGGOHNOfR8b7U2nkrV7mHfwjNPtxrQKBgQDZCfpaeuEeXiPcPcN7++1RWunEqOy9nOClwfnXFVle6KwIT4wu4Fp2XxxF0HKrV9cl6dTtIRfVDoyO38eqnj2Qa1Bnu4yqGzzAzpA+kxZy7Rw0/XrU5wTZIQr+6zlfg4D6kJ0tD5tFVYxkgZa71kA3NEyfMB+Njs/xJ0xsFlMcZQKBgGvuZPNSNcw0GwxhyiytFES7WDL4XO05LHBNxwAgnr4Lz+zOYSCJUW3EQczdaOGUypWnJKYQUUDVnBKe1nVNMJOO1v3e4CmzeomLGLVsMVbUwjsttU7T4Ha4A0Y17lvOIDFs2gLObDYKNLXwTvRMCX+gb1npASjpnEcBNPDD4475AoGAVYPG7quH041IF9kGEu3aPbnSbbgZP0R2hxj8tbAlvG10ivm8xCOFwSoMW72b0MMVdEzDpoLpfvryisDFTQZ4P1TpI1YUQFnnABjjYKRXrgSano5ZPVWg5WRNjs9jlaycvx0HsN97UEA6xscAexYZyyaCIh617/KbH+taAyRwrrkCgYEAnBbwRm5BK+a03lInaEN/ER/5So6+SwEbQAvbjkx3mO+yu+PbPhAHKaVwXkdFn2szgz/3kLsxtiDpcMJzZCXwWCRZNAAo9KmaHxvgFwTp1AIDq4R25/CzgcbJL+RKo8mu9DDTB1EO8zZgPnhJdVD7lnlJmIPFPcK9CyMe6qGJH7U=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Common for All API. </stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">test1129s3@yopmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Unique Email.</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">112233</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Any Password of 6 digit.</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">박탐나</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="birthData" elementType="Argument">
            <stringProp name="Argument.name">birthData</stringProp>
            <stringProp name="Argument.value">19920315</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">01012345682</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For User Registration API. Use any.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************&#x9;*********************************************************&#x9;" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.value">*********************************************************	*********************************************************	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tcdid" elementType="Argument">
            <stringProp name="Argument.name">tcdid</stringProp>
            <stringProp name="Argument.value">626150</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Terms &amp; Condition Add API. Note: Also Update UsrID value. For my case, value was 626150, 626151</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsrID" elementType="Argument">
            <stringProp name="Argument.name">UsrID</stringProp>
            <stringProp name="Argument.value">50001045461</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API / For User Search API</stringProp>
          </elementProp>
          <elementProp name="CardNo" elementType="Argument">
            <stringProp name="Argument.name">CardNo</stringProp>
            <stringProp name="Argument.value">9491339400350749</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="CardExpiry" elementType="Argument">
            <stringProp name="Argument.name">CardExpiry</stringProp>
            <stringProp name="Argument.value">2808</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="cardCVC" elementType="Argument">
            <stringProp name="Argument.name">cardCVC</stringProp>
            <stringProp name="Argument.value">301</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="PAR" elementType="Argument">
            <stringProp name="Argument.name">PAR</stringProp>
            <stringProp name="Argument.value">Q121B04F30F1B75540945DC289B</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Card Registration API. Collect from &apos;Card Data&apos; section of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bankAccount" elementType="Argument">
            <stringProp name="Argument.name">bankAccount</stringProp>
            <stringProp name="Argument.value">1006122222222</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API.  Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankCode" elementType="Argument">
            <stringProp name="Argument.name">BankCode</stringProp>
            <stringProp name="Argument.value">020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="BankName" elementType="Argument">
            <stringProp name="Argument.name">BankName</stringProp>
            <stringProp name="Argument.value">우리은행</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Bank Registration API. Collect from &apos;Bank Account Data&apos; of your project.</stringProp>
          </elementProp>
          <elementProp name="*********************************************************" elementType="Argument">
            <stringProp name="Argument.name">*********************************************************</stringProp>
            <stringProp name="Argument.value">*********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RegNo" elementType="Argument">
            <stringProp name="Argument.name">RegNo</stringProp>
            <stringProp name="Argument.value">AR20231129122001142405</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Checking Registration Status API</stringProp>
          </elementProp>
          <elementProp name="rechargeAmount" elementType="Argument">
            <stringProp name="Argument.name">rechargeAmount</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Recharge API</stringProp>
          </elementProp>
          <elementProp name="**********************************************************" elementType="Argument">
            <stringProp name="Argument.name">**********************************************************</stringProp>
            <stringProp name="Argument.value">********************************************************</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MarchantID" elementType="Argument">
            <stringProp name="Argument.name">MarchantID</stringProp>
            <stringProp name="Argument.value">410811880234702</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ 410811880234702</stringProp>
          </elementProp>
          <elementProp name="Channel" elementType="Argument">
            <stringProp name="Argument.name">Channel</stringProp>
            <stringProp name="Argument.value">TEST</stringProp>
            <stringProp name="Argument.desc">For Payment API. Collected from HQ &apos;TEST&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayAmmount" elementType="Argument">
            <stringProp name="Argument.name">PayAmmount</stringProp>
            <stringProp name="Argument.value">1500000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CardServiceID" elementType="Argument">
            <stringProp name="Argument.name">CardServiceID</stringProp>
            <stringProp name="Argument.value">000170000002000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentCancelnrNumber" elementType="Argument">
            <stringProp name="Argument.name">PaymentCancelnrNumber</stringProp>
            <stringProp name="Argument.value">KMD240201031866643</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Card Recharge Process" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step1: User Registration" enabled="false">
          <stringProp name="TestPlan.comments">Note: Collect UserID from the response and update the &apos;User Defined Variable Sandbox&apos;. Check registered_user.txt file for plain input and output.</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-1359863058">User Registration</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step2: Terms &amp; Cond Check" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-800305955">Terms &amp; Cond Check</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step3: Terms &amp; Cond Accept" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="898385875">Terms &amp; Cond Accept</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step4. KONA CARD Generation &amp; Bind to User" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="1554155551">KONA Card Generation</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step4: Card Registration &amp; Bind to User" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="1425091742">Card Registration &amp; Bind to User</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step5: Bank Account Registration" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="747433808">Bank Account Registration</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step6: Card Recharge" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="1836902839">Card Recharge</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Step7: Card Balance Check" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-1910316652">Card Balance Check</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Card to Card Transfer" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-699791098">Card to Card Transfer</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Payment Process" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Payment" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="877971942">Payment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Login" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="427316479">Login Feature</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Cards" enabled="false"/>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Payment Cancel" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="979102228">Payment Cancel</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Other API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="User Details" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-1805489427">User Details</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="User Update" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="576683710">User Update</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Bank Account Inquiry" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="-932740912">Bank Account Inquiry</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Transaction History (Problematic)" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="309545928">All Modules</stringProp>
            <stringProp name="2002318610">Transaction History</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="All Modules" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Registration" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Registration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/registration</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);
String CI_Str=&quot;KONA&quot;+ randomStr + randomStr + randomStr + randomStr+randomStr + randomStr + randomStr + randomStr+randomStr + randomStr + randomStr + randomStr;


requestMap.put(&quot;ci&quot;, CI_Str);
log.info(&quot;CI string=&quot;+CI_Str);
requestMap.put(&quot;loginId&quot;, vars.get(&quot;email&quot;));
requestMap.put(&quot;loginPassword&quot;, vars.get(&quot;password&quot;));
requestMap.put(&quot;birthDate&quot;, vars.get(&quot;birthData&quot;));
requestMap.put(&quot;nationality&quot;, &quot;Korean&quot;);
requestMap.put(&quot;gender&quot;, &quot;Male&quot;);
requestMap.put(&quot;userName&quot;, vars.get(&quot;UserName&quot;));
requestMap.put(&quot;mobileNumber&quot;, vars.get(&quot;mobile&quot;));
requestMap.put(&quot;email&quot;, vars.get(&quot;email&quot;));

Map&lt;String, String&gt; AddressMap = new HashMap&lt;&gt;();


AddressMap.put(&quot;zipCode&quot;, &quot;12345&quot;);
AddressMap.put(&quot;address&quot;, &quot;Test Address&quot;);
AddressMap.put(&quot;addressDetail&quot;, &quot;Test Details&quot;);
String AddressJson = new Gson().toJson(AddressMap);

log.info(&quot;Address Dictionary=&quot;+AddressJson);

//requestMap.put(&quot;addressInfo&quot;, AddressJson);
List&lt;String&gt; al = new ArrayList&lt;&gt;();
al.add(&quot;626150&quot;);
al.add(&quot;626151&quot;);


requestMap.put(&quot;tcIdList&quot;, al);
log.info(&quot;Term ID=&quot;+al);
// Map to Json String

//String listinfo=[&quot;29184&quot;,&quot;29187&quot;,&quot;29188&quot;,&quot;29185&quot;,&quot;533150&quot;,&quot;534150&quot;,&quot;29186&quot;,&quot;604201&quot;,&quot;550150&quot;,&quot;550151&quot;,&quot;550152&quot;,&quot;559150&quot;,&quot;576150&quot;,&quot;576151&quot;,&quot;578151&quot;,&quot;601151&quot;,&quot;601152&quot;,&quot;604150&quot;,&quot;606153&quot;]

String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: User Registration, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Terms &amp; Cond Check" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Terms Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/terms/all</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, Long.parseLong(vars.get(&quot;UsrID&quot;)));
// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullresponse</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Terms &amp; Condition Check, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Terms &amp; Cond Accept" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Terms Add" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/terms/updateOptionalTermsAndConditions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;



// Map to Json String
String requestJson =&quot;{\&quot;tcList\&quot;: [{\&quot;tcId\&quot;: &quot;+vars.get(&quot;tcdid&quot;)+&quot;,\&quot;acceptedByUser\&quot;: true}],\&quot;userId\&quot;: &quot;+vars.get(&quot;UsrID&quot;)+&quot;}&quot;;
log.info(&quot;Terms Request:&quot;+requestJson);

vars.put(&quot;reqBody&quot;, requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullresponse</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Terms &amp; Condition Acception, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card Registration &amp; Bind to User" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card Registration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/prepay-card/physical/register</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);
String UniqueCardApplyNo=&quot;C&quot;+ randomStr + randomStr + randomStr ;


//requestMap.put(&quot;cardApplyNo&quot;, UniqueCardApplyNo);
//log.info(&quot;Unique string=&quot;+UniqueCardApplyNo);

requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;physicalCardNo&quot;, vars.get(&quot;CardNo&quot;));
requestMap.put(&quot;physicalCardExpDate&quot;, vars.get(&quot;CardExpiry&quot;));
requestMap.put(&quot;physicalCardCVC&quot;, vars.get(&quot;cardCVC&quot;));
requestMap.put(&quot;extMobileCardPar&quot;, vars.get(&quot;PAR&quot;));



// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Card Registration, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Bank Account Registration" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bank Registration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/bankaccounts/ars/register</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;bankAccount&quot;, vars.get(&quot;bankAccount&quot;));
requestMap.put(&quot;bankCode&quot;, vars.get(&quot;BankCode&quot;));
requestMap.put(&quot;bankName&quot;, vars.get(&quot;BankName&quot;));
requestMap.put(&quot;userName&quot;, vars.get(&quot;UserName&quot;));
requestMap.put(&quot;birthDate&quot;, vars.get(&quot;birthData&quot;));
requestMap.put(&quot;langCode&quot;, &quot;en&quot;);




// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullresponse</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Bank Account Registration, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card Recharge" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/payment/generate/onetimetoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = &quot;{\&quot;cardNo\&quot;:\&quot;&quot;+vars.get(&quot;CardNo&quot;)+&quot;\&quot;}&quot;;
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Recharge" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/recharges/by-bank-accounts/no-hce</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);
String UniqueSequenceNo=&quot;S&quot;+ randomStr + randomStr + randomStr ;


requestMap.put(&quot;sequenceId&quot;, UniqueSequenceNo);
log.info(&quot;sequenceId Unique string=&quot;+UniqueSequenceNo);

requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;amount&quot;, vars.get(&quot;rechargeAmount&quot;));
requestMap.put(&quot;oneTimeToken&quot;, vars.get(&quot;Token&quot;));
requestMap.put(&quot;dcvv&quot;, vars.get(&quot;DCVV&quot;));
requestMap.put(&quot;cardExpiry&quot;, vars.get(&quot;CardExpiry&quot;));
//requestMap.put(&quot;merchantId&quot;, vars.get(&quot;MarchantID&quot;));



// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullresponse</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Card Recharge, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card Balance Check" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/card/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
//requestMap.put(&quot;aspId&quot;, vars.get(&quot;asp_id&quot;));
//requestMap.put(&quot;par&quot;, vars.get(&quot;PAR&quot;));


// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);


vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;



// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);



import groovy.json.JsonBuilder
def fullresponse = vars.get(&quot;DecryptedFullData&quot;)
def json = new groovy.json.JsonSlurper().parseText(fullresponse)
def builder = new JsonBuilder(json)
def jsonString = builder.toPrettyString()

log.info(&quot;Formatted DecryptedFullData: &quot; + DecryptedFullData);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonBuilder

vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Card Balance Check, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);


def fullresponse = vars.get(&quot;DecryptedFullData&quot;)

def json = new groovy.json.JsonSlurper().parseText(fullresponse)
def builder = new JsonBuilder(json)
def jsonString = builder.toPrettyString()
buff.write(jsonString)
buff.write(&quot;\n&quot;);
buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card to Card Transfer" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/payment/generate/onetimetoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = &quot;{\&quot;cardNo\&quot;:\&quot;&quot;+vars.get(&quot;CardNo&quot;)+&quot;\&quot;}&quot;;
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card to Card" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/gifts/money/transfer/no-hce</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;dcvv&quot;, vars.get(&quot;DCVV&quot;));
requestMap.put(&quot;amount&quot;, 10);
requestMap.put(&quot;locale&quot;, &quot;KO&quot;);
requestMap.put(&quot;cardExpiry&quot;, vars.get(&quot;CardExpiry&quot;));
requestMap.put(&quot;senderName&quot;, vars.get(&quot;UserName&quot;));
requestMap.put(&quot;oneTimeToken&quot;, vars.get(&quot;Token&quot;));
requestMap.put(&quot;senderUserId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;receiverUserId&quot;, &quot;50001045229&quot;);


// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);


vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Card Balance Check, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/payment/generate/onetimetoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = &quot;{\&quot;cardNo\&quot;:\&quot;&quot;+vars.get(&quot;CardNo&quot;)+&quot;\&quot;}&quot;;
log.info(&quot;Plain Text Data=&quot;+plainData);



String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));
log.info(&quot;Get RSA Public Key Method Result: &quot; + getRsaPublicKey(publicKey));


log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
log.info(&quot;Date String = &quot; + dateStr);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/payment/no-hce</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;oneTimeToken&quot;, vars.get(&quot;Token&quot;));
requestMap.put(&quot;amount&quot;, vars.get(&quot;PayAmmount&quot;));
requestMap.put(&quot;cardExpiry&quot;, vars.get(&quot;CardExpiry&quot;));
requestMap.put(&quot;merchantId&quot;, vars.get(&quot;MarchantID&quot;));
requestMap.put(&quot;dcvv&quot;,vars.get(&quot;DCVV&quot;));
requestMap.put(&quot;exceptAmount&quot;, 3);
requestMap.put(&quot;channel&quot;, vars.get(&quot;Channel&quot;));
requestMap.put(&quot;vat&quot;, 2);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

requestMap.put(&quot;transactionId&quot;, randomStr + randomStr + randomStr + randomStr);


// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="false">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Payment API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


//String DecryptedData = &quot;${decryptData}&quot;;

String DecryptedData =vars.get(&quot;decryptData&quot;);
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Payment API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Cancel" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/payment/cancel/no-hce</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();

requestMap.put(&quot;cardNo&quot;, vars.get(&quot;CardNo&quot;));
requestMap.put(&quot;amount&quot;, vars.get(&quot;PayAmmount&quot;));
requestMap.put(&quot;nrNumber&quot;, vars.get(&quot;PaymentCancelnrNumber&quot;));
requestMap.put(&quot;merchantId&quot;, vars.get(&quot;MarchantID&quot;));
requestMap.put(&quot;channel&quot;, vars.get(&quot;Channel&quot;));


String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Details" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Info" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/info</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: User Details API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KONA Card Generation" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card Apply" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/prepay-card/issue/delivery</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;
/*
Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;serviceId&quot;, vars.get(&quot;CardServiceID&quot;));

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);
*/
String requestJson=&quot;{\&quot;userInfo\&quot;: {\&quot;userId\&quot;: &quot;+vars.get(&quot;UsrID&quot;)+&quot;},\&quot;serviceId\&quot;: \&quot;&quot;+vars.get(&quot;CardServiceID&quot;)+&quot;\&quot;,\&quot;isDeliveryRequired\&quot;: false}&quot;
log.info(requestJson);
vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Decryption the response" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.*;

// Decrypt : make plain text by using RSA Private Key
    public static String rsaDecrypt(String cipherText, RSAPrivateKey key) throws ParseException, JOSEException {
        JWEObject jweObject = JWEObject.parse(cipherText);
        RSADecrypter rsaDecrypter = new RSADecrypter(key);
        jweObject.decrypt(rsaDecrypter);
        Payload payload = jweObject.getPayload();
        return payload.toString();
    }

    // Decrypt : make RSA Private Key
    public static RSAPrivateKey getRsaPrivateKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Base64 base64 = new Base64(encodedKey);
        byte[] decodedKey = base64.decode();
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    }

String privateKey =&quot;${privatekey}&quot;;


String DecryptedData = &quot;${decryptData}&quot;;
log.info(&quot;Decrypted Text Data=&quot;+DecryptedData);


String DecryptedFullData = rsaDecrypt(DecryptedData, getRsaPrivateKey(privateKey));

log.info(&quot;DecryptedFullData: &quot; + DecryptedFullData);

vars.put(&quot;DecryptedFullData&quot;, DecryptedFullData);




//String otp=responseJson.get(&quot;oneTimeToken&quot;);
//log.info(&quot;oneTimeToken: &quot; + otp);


// Map to Json String
/*String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);*/</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get Token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.oneTimeToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get DCVV" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">DCVV</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.dcvv</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">DecryptedFullData</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: User Details API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User Update" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CI value" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CI_Str" elementType="Argument">
                <stringProp name="Argument.name">CI_Str</stringProp>
                <stringProp name="Argument.value">KONA969405996940599694059969405996940599694059969405996940599694059969405996940599694059</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/info/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Plain Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();


requestMap.put(&quot;userId&quot;, vars.get(&quot;UsrID&quot;));
requestMap.put(&quot;ci&quot;, vars.get(&quot;CI_Str&quot;));
//log.info(&quot;CI string=&quot;+CI_Str);
requestMap.put(&quot;loginId&quot;, vars.get(&quot;email&quot;));
requestMap.put(&quot;loginPassword&quot;, vars.get(&quot;password&quot;));
requestMap.put(&quot;birthDate&quot;, vars.get(&quot;birthData&quot;));
requestMap.put(&quot;nationality&quot;, &quot;Korean&quot;);
requestMap.put(&quot;gender&quot;, &quot;Male&quot;);
requestMap.put(&quot;userName&quot;, vars.get(&quot;UserName&quot;));
requestMap.put(&quot;mobileNumber&quot;, vars.get(&quot;mobile&quot;));
requestMap.put(&quot;email&quot;, vars.get(&quot;email&quot;));

Map&lt;String, String&gt; AddressMap = new HashMap&lt;&gt;();


AddressMap.put(&quot;zipCode&quot;, &quot;12345&quot;);
AddressMap.put(&quot;address&quot;, &quot;Test Address&quot;);
AddressMap.put(&quot;addressDetail&quot;, &quot;Test Details&quot;);
String AddressJson = new Gson().toJson(AddressMap);

log.info(&quot;Address Dictionary=&quot;+AddressJson);

//requestMap.put(&quot;addressInfo&quot;, AddressJson);
List&lt;String&gt; al = new ArrayList&lt;&gt;();
al.add(&quot;626150&quot;);
al.add(&quot;626151&quot;);



requestMap.put(&quot;tcIdList&quot;, al);
//log.info(&quot;Term ID=&quot;+al);
// Map to Json String

String listinfo=[&quot;29184&quot;,
&quot;29187&quot;,
&quot;29188&quot;,
&quot;29185&quot;,
&quot;533150&quot;,
&quot;534150&quot;,
&quot;29186&quot;,
&quot;604201&quot;,
&quot;550150&quot;,
&quot;550151&quot;,
&quot;550152&quot;,
&quot;559150&quot;,
&quot;576150&quot;,
&quot;576151&quot;,
&quot;578151&quot;,
&quot;601151&quot;,
&quot;601152&quot;,
&quot;604150&quot;,
&quot;606153&quot;]

String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);

log.info(&quot;Plain Request Body: &quot;+ PlainReqBody);



</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Encrypt Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.JWEHeader;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.JWEObject;
import com.nimbusds.jose.crypto.RSADecrypter;
import com.nimbusds.jose.crypto.RSAEncrypter;
import com.nimbusds.jose.util.Base64;

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

// Encrypt : make cipher text by using RSA Public Key
public static String rsaEncrypt(String plainText, RSAPublicKey key) throws JOSEException {
   JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM).build();
   Payload payload = new Payload(plainText);
   JWEObject jweObject = new JWEObject(jweHeader, payload);
   RSAEncrypter rsaEncrypter = new RSAEncrypter(key);
   jweObject.encrypt(rsaEncrypter);
   return jweObject.serialize();
}

// Encrypt : make RSA Public Key
public static RSAPublicKey getRsaPublicKey(String encodedKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
   Base64 base64 = new Base64(encodedKey);
   byte[] decodedKey = base64.decode();
   X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
   KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
   return (RSAPublicKey) keyFactory.generatePublic(keySpec);
}


String publicKey = &quot;${publickey}&quot;;

String plainData = vars.get(&quot;PlainReqBody&quot;);
log.info(&quot;Plain Text Data=&quot;+plainData);


String encryptedData = rsaEncrypt(plainData, getRsaPublicKey(publicKey));

log.info(&quot;encryptedData: &quot; + encryptedData);


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;encData&quot;, encryptedData);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}


String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="true">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;code&quot;,prev.getResponseCode())
log.info(vars.get(&apos;code&apos;) );

if (vars.get(&apos;code&apos;)==&quot;200&quot;) {

FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(&quot;API Name: User Update, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);

buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;DecryptedFullData&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Bank Account Inquiry" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inquiry" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/bankaccounts/ars/register/inquiry</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();


requestMap.put(&quot;regNo&quot;, vars.get(&quot;RegNo&quot;));




// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction History" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction History (Problematic)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api /api/v1/transaction/card</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;


Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;userId&quot;, Long.parseLong(vars.get(&quot;UsrID&quot;)));
requestMap.put(&quot;startDate&quot;, &quot;20230101&quot;);
requestMap.put(&quot;endDate&quot;, &quot;20230901&quot;);
requestMap.put(&quot;par&quot;, vars.get(&quot;PAR&quot;));

Map&lt;String, String&gt; pageMap = new HashMap&lt;&gt;();
pageMap.put(&quot;page&quot;, Long.parseLong(&quot;0&quot;));
pageMap.put(&quot;pageSize&quot;, Long.parseLong(&quot;2&quot;));
pageMap.put(&quot;orderByDirection&quot;, &quot;DESC&quot;);


log.info(&quot;Page Request &quot;+pageMap);
requestMap.put(&quot;pageRequest&quot;, pageMap);

// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate cid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Feature" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/password/check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;loginId&quot;, vars.get(&quot;email&quot;));
requestMap.put(&quot;loginPassword&quot;, vars.get(&quot;password&quot;));




// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="false">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Payment API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Card View" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card View" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${reqBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${baseURL}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/open-api/api/v1/user/card/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-User-AspId</stringProp>
                  <stringProp name="Header.value">${asp_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Correlation-Id</stringProp>
                  <stringProp name="Header.value">${cid}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Access-Key</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Crypto-Key-Id</stringProp>
                  <stringProp name="Header.value">${crypto_key_id}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Token</stringProp>
                  <stringProp name="Header.value">${tranToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Tran-Time</stringProp>
                  <stringProp name="Header.value">${dateTime}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-KM-Time-Zone</stringProp>
                  <stringProp name="Header.value">${time_zone}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">20230830115402660</stringProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Request Body" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import java.util.Random;

Map&lt;String, String&gt; requestMap = new HashMap&lt;&gt;();
requestMap.put(&quot;loginId&quot;, vars.get(&quot;email&quot;));
requestMap.put(&quot;loginPassword&quot;, vars.get(&quot;password&quot;));




// Map to Json String
String requestJson = new Gson().toJson(requestMap);
log.info(requestJson);

vars.put(&quot;reqBody&quot;, requestJson);

vars.put(&quot;PlainReqBody&quot;, requestJson);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">final Request Will be on reqBody</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Tran Token" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.codec.Charsets;
import org.apache.commons.codec.digest.HmacAlgorithms;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.codec.binary.*;
import javax.crypto.Mac;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Date;

// hMac Method
public String hMac(String secretKey, String body){
	Charset charset = Charsets.UTF_8;
	HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
	byte[] secretKeyByte = secretKey.getBytes(charset);
	byte[] bodyByte = body.getBytes(charset);
	Mac mac = HmacUtils.getInitializedMac(algorithm, secretKeyByte);
	byte[] encodeBase64 = Base64.encodeBase64(mac.doFinal(bodyByte));
	return new String(encodeBase64, charset);
}



String body = vars.get(&quot;reqBody&quot;);
log.info(&quot;Body: &quot;+ body);


String secretKey = &quot;${secret_Key}&quot;;
log.info(&quot;secretKey: &quot;+ secretKey);

Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String dateStr = new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;).format(newDate);
vars.put(&quot;dateTime&quot;, dateStr.substring(0,14));

String tranToken = &quot;KMV1&quot; + &apos;:&apos; + dateStr + &apos;:&apos; + hMac(secretKey, body);
vars.put(&quot;tranToken&quot;, tranToken);
log.info(&quot;tranToken = &quot; + tranToken);

props.put(&quot;tranToken&quot;, vars.get(&quot;tranToken&quot;))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Correlation ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


Date date = new Date();
long time = date.getTime() + 3 * 3600 * 1000;
Date newDate = new Date(time);

String cid_date = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;).format(newDate);

Random random = new Random();
int randomInt = random.nextInt(1000000, 9999999);
String randomStr = String.valueOf(randomInt);

String cid = cid_date + &apos;-&apos; + randomStr;
log.info(&quot;cid : &quot; + cid);

vars.put(&quot;cid&quot;, cid);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">decryptData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.encData</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">na</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Write Req &amp; Response" enabled="false">
              <stringProp name="TestPlan.comments">File Name: registered_users.txt</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">FileWriter fWriter = new FileWriter(&quot;registered_users.txt&quot;, true);
BufferedWriter buff = new BufferedWriter(fWriter);
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;API Name: Payment API, Email: &quot;);
buff.write(vars.get(&quot;email&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; Password: &quot;);
buff.write(vars.get(&quot;password&quot;));
buff.write(&quot;,&quot;);
buff.write(&quot; &amp; X-KM-Correlation-Id: &quot;);
buff.write(vars.get(&quot;cid&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Request Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;PlainReqBody&quot;));
buff.write(&quot;\n&quot;);
buff.write(&quot;\n&quot;);
buff.write(&quot;Plain Response Body:&quot;);
buff.write(&quot;\n&quot;);
buff.write(vars.get(&quot;fullresponse&quot;));
buff.write(&quot;\n&quot;);

buff.close();
fWriter.close();
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
